/*
Copyright 2020 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kubernetes-sigs/container-object-storage-interface-api/apis/objectstorage.k8s.io/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// COSIDriverLister helps list COSIDrivers.
type COSIDriverLister interface {
	// List lists all COSIDrivers in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.COSIDriver, err error)
	// COSIDrivers returns an object that can list and get COSIDrivers.
	COSIDrivers(namespace string) COSIDriverNamespaceLister
	COSIDriverListerExpansion
}

// cOSIDriverLister implements the COSIDriverLister interface.
type cOSIDriverLister struct {
	indexer cache.Indexer
}

// NewCOSIDriverLister returns a new COSIDriverLister.
func NewCOSIDriverLister(indexer cache.Indexer) COSIDriverLister {
	return &cOSIDriverLister{indexer: indexer}
}

// List lists all COSIDrivers in the indexer.
func (s *cOSIDriverLister) List(selector labels.Selector) (ret []*v1alpha1.COSIDriver, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.COSIDriver))
	})
	return ret, err
}

// COSIDrivers returns an object that can list and get COSIDrivers.
func (s *cOSIDriverLister) COSIDrivers(namespace string) COSIDriverNamespaceLister {
	return cOSIDriverNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// COSIDriverNamespaceLister helps list and get COSIDrivers.
type COSIDriverNamespaceLister interface {
	// List lists all COSIDrivers in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.COSIDriver, err error)
	// Get retrieves the COSIDriver from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.COSIDriver, error)
	COSIDriverNamespaceListerExpansion
}

// cOSIDriverNamespaceLister implements the COSIDriverNamespaceLister
// interface.
type cOSIDriverNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all COSIDrivers in the indexer for a given namespace.
func (s cOSIDriverNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.COSIDriver, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.COSIDriver))
	})
	return ret, err
}

// Get retrieves the COSIDriver from the indexer for a given namespace and name.
func (s cOSIDriverNamespaceLister) Get(name string) (*v1alpha1.COSIDriver, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("cosidriver"), name)
	}
	return obj.(*v1alpha1.COSIDriver), nil
}
