/*
Copyright 2020 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "sigs.k8s.io/container-object-storage-interface-api/apis/objectstorage.k8s.io/v1alpha1"
)

// BucketAccessInfoLister helps list BucketAccessInfos.
type BucketAccessInfoLister interface {
	// List lists all BucketAccessInfos in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.BucketAccessInfo, err error)
	// BucketAccessInfos returns an object that can list and get BucketAccessInfos.
	BucketAccessInfos(namespace string) BucketAccessInfoNamespaceLister
	BucketAccessInfoListerExpansion
}

// bucketAccessInfoLister implements the BucketAccessInfoLister interface.
type bucketAccessInfoLister struct {
	indexer cache.Indexer
}

// NewBucketAccessInfoLister returns a new BucketAccessInfoLister.
func NewBucketAccessInfoLister(indexer cache.Indexer) BucketAccessInfoLister {
	return &bucketAccessInfoLister{indexer: indexer}
}

// List lists all BucketAccessInfos in the indexer.
func (s *bucketAccessInfoLister) List(selector labels.Selector) (ret []*v1alpha1.BucketAccessInfo, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BucketAccessInfo))
	})
	return ret, err
}

// BucketAccessInfos returns an object that can list and get BucketAccessInfos.
func (s *bucketAccessInfoLister) BucketAccessInfos(namespace string) BucketAccessInfoNamespaceLister {
	return bucketAccessInfoNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BucketAccessInfoNamespaceLister helps list and get BucketAccessInfos.
type BucketAccessInfoNamespaceLister interface {
	// List lists all BucketAccessInfos in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.BucketAccessInfo, err error)
	// Get retrieves the BucketAccessInfo from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.BucketAccessInfo, error)
	BucketAccessInfoNamespaceListerExpansion
}

// bucketAccessInfoNamespaceLister implements the BucketAccessInfoNamespaceLister
// interface.
type bucketAccessInfoNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all BucketAccessInfos in the indexer for a given namespace.
func (s bucketAccessInfoNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.BucketAccessInfo, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BucketAccessInfo))
	})
	return ret, err
}

// Get retrieves the BucketAccessInfo from the indexer for a given namespace and name.
func (s bucketAccessInfoNamespaceLister) Get(name string) (*v1alpha1.BucketAccessInfo, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("bucketaccessinfo"), name)
	}
	return obj.(*v1alpha1.BucketAccessInfo), nil
}
